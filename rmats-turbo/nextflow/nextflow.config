manifest {
  author = "Chunjie Liu"
  homePage = "https://github.com/chunjie-sam-liu/rmats-turbo-nf"
  mainScript = "rmatsTurbo.nf"
}

name = "test_rmats_turbo_nf"
workDir = "${HOME}/scratch/nf-work/${name}"

params {
  // input bam files
  // bam_g1 = false
  bam_g1 = "/scr1/users/liuc9/rmatsTurbo/GS689_head_1M.tsv"
  bam_g2 = "/scr1/users/liuc9/rmatsTurbo/PC3E_head_1M.tsv"

  // reference
  // gtf = false
  gtf = "/mnt/isilon/xing_lab/liuc9/refdata/star-genome-index-grch38-gencode-v36/gencode.v36.annotation.chrom.gtf"

  is_single_end = false
  readLength = 101
  nthread = 1

  out_dir = "/scr1/users/liuc9/rmatsTurbo/test_rmats_turbo_nf"
  lib_type = "fr-unstranded"
  variable_read_length = false
  anchorLength = false

  tstat = 1
  cstat = "0.0001"
  statoff = false
  paired_stats  = false
  darts_model = false
  darts_cutoff = "0.05"

  novelSS = false
  mil = 50
  mel = 500
  allow_clipping = false
  individual_counts = false


  machine_mem_gb = 4
  disk_space_gb = 20
  use_ssd = false

  rmats_version = "v4.3.0"
  container = "xinglab/rmats:${rmats_version}"


  // Nextlfow
  max_retries = 3
  publishDir = params.out_dir

  error_strategy = "finish"
  allowed_error_strategies = ["terminate", "finish", "ignore", "retry"]
  cleanup = false
  echo = false
  debug = false

  mega_time = 20.h
  tera_time = 50.h

  singularity_cache = "${HOME}/data/.singularity_tmp/cache"
}

cleanup = params.cleanup

dsl2 {
  enabled = true
  endpoint = "-"
}

process {
  errorStrategy = params.error_strategy
  echo = params.echo

  container = "xinglab/rmats:${params.rmats_version}"
  executor = "slurm"

  maxRetries = params.max_retries
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel: tiny_memory {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 10.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel: low_memory {
    cpus = { check_max (8, 'cpus')}
    memory = { check_max( 20.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel: mid_memory {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 40.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }
  withLabel: high_memory {
    cpus = { check_max (20, 'cpus')}
    memory = { check_max( 60.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel: mega_memory {
    echo = params.debug
    cpus = { check_max (20, 'cpus')}
    memory = { check_max( 80.GB * task.attempt, 'memory' ) }
    time = { check_max( params.mega_time * task.attempt, 'time' ) }
  }
  withLabel: tera_memory {
    cpus = { check_max (30, 'cpus')}
    memory = { check_max( 500.GB * task.attempt, 'memory' ) }
    time = { check_max( params.tera_time * task.attempt, 'time' ) }
  }
}

// docker.enabled = false
singularity.enabled = true

// docker {
//   enabled = true
//   autoMount = true
// }

singularity {
  enabled = true
  autoMounts = true
  runOptions = "--bind /scr1/users/liuc9/:/scr1/users/liuc9/,/mnt/isilon/xing_lab/liuc9/:/mnt/isilon/xing_lab/liuc9/,/mnt/isilon/xing_lab/aspera/liuc9/:/mnt/isilon/xing_lab/aspera/liuc9"
  cacheDir = params.singularity_cache
}

executor {
  name = 'slurm'
  queueSize = 100
}



// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
